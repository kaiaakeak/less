# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000

Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""
prefix=input('Enter ip address and prefix in format x.x.x.x/xx:\n')
ip,mask=prefix.split('/')
bin_ip='{:08b}'.format(int(ip.split('.')[0]))+'{:08b}'.format(int(ip.split('.')[1]))+'{:08b}'.format(int(ip.split('.')[2]))+'{:08b}'.format(int(ip.split('.')[3]))
bin_mask=int(mask)*'1'+(32-int(mask))*'0'
bin_net=bin_ip[:int(mask)]+(32-int(mask))*'0'

octnet1=int(bin_net[0:8],2)
octnet2=int(bin_net[8:16],2)
octnet3=int(bin_net[16:24],2)
octnet4=int(bin_net[24:32],2)

oct1mask=int(bin_mask[0:8],2)
oct2mask=int(bin_mask[8:16],2)
oct3mask=int(bin_mask[16:24],2)
oct4mask=int(bin_mask[24:32],2)

out_net="""
Network:
{0:8} {1:8} {2:8} {3:8}
{0:08b} {1:08b} {2:08b} {3:08b}
"""
out_mask="""
Mask:
/{4}
{0:8} {1:8} {2:8} {3:8}
{0:08b} {1:08b} {2:08b} {3:08b}
"""
print(out_net.format(int(octnet1),int(octnet2),int(octnet3),int(octnet4)))
print(out_mask.format(oct1mask, oct2mask, oct3mask, oct4mask, mask))
